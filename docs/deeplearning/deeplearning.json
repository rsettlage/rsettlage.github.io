[
  {
    "path": "deeplearning/",
    "title": "DeepLearning Inspiration",
    "description": "Details of why DeepLearning for me.",
    "author": [
      {
        "name": "Robert Settlage",
        "url": {}
      }
    ],
    "date": "2022-06-01",
    "categories": [
      "DeepLearning",
      "Perceptron"
    ],
    "contents": "\n\nContents\nPerceptron\nInputs\nWeights\nZ\nActivation function\nOutputs\n\nLearning\nLoss function\nGradient descent\n\nExample 1: linear model\nExample 2: binary\nclassification\nMulticlass perceptrons\nMultilayer Perceptrons\n\n\nI like computer simulations. That is like dumb science though. What\nif the computer could actually learn and make decisions. Woah. Perhaps\nthat is a little too Terminator for where we are at currently, but, how\nfar away is that? Probably not terribly far off. As with the MCMC\ncollection, I am going to start at the start of my understanding and see\nwhere I get. In the realm of Deep Learning, I particularly like\nadversarial networks and reinforcement learning so will likely spend\nmore time on those.\nHere, I am going to start with what I see as the motivation for\nDeepLearning, biology and the perceptron. A particularly good coffee\ntable resource is:\n\n\n\nGoodFellow\n@book{Goodfellow-et-al-2016,\n    title={Deep Learning},\n    author={Ian Goodfellow and Yoshua Bengio and Aaron Courville},\n    publisher={MIT Press},\n    note={\\url{http://www.deeplearningbook.org}},\n    year={2016}\n}\nMuch of AI/Machine Learning/Deep Learning history is steeped in\nreplicating nature, specifically the functions of the brain. Drilling\ndown into the brain, we get to neurons. Neurons take input from\ndendrites, pass these as signals through the axon, which are then\ntransmitted through synapses to the dendrites of another neuron.\nModelling the functional behavior of neurons is a feat. Enter the\nperceptron.\nWiki neuron\nPerceptron\nThe Wiki for\nPerceptron’s is pretty complete and I will just quote it:\n\nIn machine learning, the perceptron is an algorithm for supervised\nlearning of binary classifiers. A binary classifier is a function which\ncan decide whether or not an input, represented by a vector of numbers,\nbelongs to some specific class. It is a type of linear classifier,\ni.e. a classification algorithm that makes its predictions based on a\nlinear predictor function combining a set of weights with the feature\nvector.\n\nSo, the perceptron is essentially an over simplified model of our\nunderstanding of neurons. The perceptron is an algorithm that can be\ntuned to perform classification tasks. Since we are simplifying, let’s\ndraw the neuron using input/output labels as our new perceptron.\n\n\n\nFigure 1: Simple perceptron.\n\n\n\nAbove, in our over simplified neuron, we see the components of our\nperceptron are inputs, x’s, importance weights, w’s, an activation\nfunction, f(z), and output, y. We will talk through these parts and then\nimplement this in a simple learning model.\nInputs\nIn our perceptron understanding of neurons, we accept inputs as the\nstart to our algorithm. The inputs can be any type of data, for\ninstance, continuous values such as height, weight, or width, or even\ndiscrete values such as counts or class memberships such as word labels\nin text analytics. When we think of these inputs in our neuronal\nunderstanding, they will often be combined with a bias as in the\naugmented image below. In the neuron, the bias is considered a threshold\nvalue below which the neuron will not “fire” or activate. In our\nperceptron, this is limiting to the case of binary classification,\nuseful, but not complete in that we can use the perceptron for tasks\nother than binary classification as we will see below.\n\n\n\nFigure 2: Perceptron with bias drawn with draw.io.\n\n\n\nWeights\nThese are the things we need, the parameters of the model. In a\nlinear models class, these would be our \\(\\beta\\)’s. The weights are numerical values\nthat indicate the importance of the specific input dimension, ie \\(x_i\\). The perceptron learning algorithm\nwill learn these through iteration, likely using some permutation of\ngradient descent. As mentioned above, we are adding a bias to the\nalgorithm. This is functionally equivalent to an intercept in a linear\nmodel. I have labeled it as “b” and given it a weight, \\(w_0\\), it is convenient to assume b=1 and\nadd this as a dimension to our data as \\(x_0\\).\nZ\nWe need a function to combine the data with the appropriate weights.\nThis is generally given the sybmol “z” or in some figures the symbol for\nsum: \\(\\sum\\). Setting the bias \\(x_0 = 1\\) and learning the associate weight\n(\\(w_0\\)) leaves us with:\n\\[\n\\begin{equation}\n\\tag{1}\n\\textbf{z} = \\sum_i w_i \\ast x_i = \\textbf{w}\\cdot\\textbf{x}\n\\end{equation}\n\\]\nActivation function\nThe activation function, \\(f(z)\\)\ncan take on many forms. In it’s simplest form, it is simply the\nidentity, ie \\(f(z)=z\\). This\neffectively makes the perceptron a linear model. Turning to\nclassification, the activation function becomes the Heavyside step\nfunction, or a mapping \\(z\\) to\n(0,1).\n\\[\n\\begin{equation}\n\\tag{2}\nf(z) =\n\\begin{cases}\n1 \\text{ if } z = \\textbf{w} \\cdot \\textbf{x} > 0 \\\\\n0 \\text{ otherwise}\n\\end{cases}\n\\end{equation}\n\\]\nActivation functions are a varied and active area of research. Common\nactivation functions in neural networks include ReLU, sigmoid, and tanh\namong others. Choice of activation function depends highly on the goals\nof the algorithm and will be discussed in its own future post. Here I\nwill simply give the sigmoid activation function and state that it is\nappropriate and useful in categorical settings where a probability is\ndesired. The sigmoid function looks like:\n\\[\n\\begin{equation}\n\\tag{3}\nf(z) = \\frac{1}{1+e^{-z}} = \\frac{1}{1+e^{-\\textbf{w}\\cdot\\textbf{x}}}\n\\end{equation}\n\\] It is useful to note that \\(\\textbf{w}\\cdot\\textbf{x} \\in\n[-\\infty,\\infty]\\) such that \\(f(z) \\in\n[0,1]\\). For those of you that have studied logistic regression,\nthis should look familiar. In neural network diagrams, you will often\nsee the sigmoid activation as \\(\\sigma(z)\\).\nOutputs\nThe output of the perceptron is our decision. If using the step\nfunction given in (2), the decision may be something as simple as is the\nimage a cat (+1) or not a cat (0). Turning to linear regression, the\noutput is our z’s, or y’s if that is more familiar.\nLearning\nI was hoping to skip this for now, but want to go through an example,\nso will need to hit on both scoring a result and improving the score.\nEssentially, what we are hitting on is the perceptron receives data,\napplies weights, adds them according to \\(z\\), and finally calculates the function\n\\(f(z)\\) to create an output \\(y\\). This output can be a binary (0,1),\ncategorical discrete (0,1,2,…), or a continuous value on some range\n[0,1]. We often (always?) are fitting some known data. Using the known\ndata, we can score how well the current settings on weight fit the data.\nWe do this via a score function often called a cost or loss function in\nAI/machine learning speak. If we can score our result, we should be able\nto improve our score. We do this through iterative updates, often using\na variant of gradient descent and back propagation.\nLoss function\nThe loss function is some measure of how good/bad the model performs\nbased on data. I am going to leave most of this discussion for a\ndifferent post and just give two here: MSE or L\\(_2\\) error and binary cross entropy.\nMSE\nMSE, L\\(_2\\), or mean squared error\nis a measure of error well suited for continuous data. It is calculated\nexactly as the name suggests, take the mean of the square of the\nerror.\\[\n\\begin{eqnarray}\n\\tag{4}\nMSE &=& \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 \\\\\n  &=& \\frac{1}{n} \\sum_{i=1}^n (y_i -\n\\hat{\\textbf{w}}\\cdot\\textbf{x}_i)^2\n\\end{eqnarray}\n\\] Remembering that in the above \\(y =\nf(z) = \\textbf{w}\\cdot\\textbf{x}\\). The hat \\(\\hat{}\\) signifies this is an estimated\nvalue, ie the current output of the perceptron using the current values\nof weights. The last line is simply noting the \\(x_i\\) are likely vectors representing the\ninclusion of the bias as an x and perhaps multiple dimensions to the\ndata. Note that MSE is always positive and gets smaller as the\nprediction and true values converge.\nBinary Cross Entropy\nOften we are looking to discriminate between categories, cat vs dog,\nhigh vs medium vs low, safe vs risky, etc. In the general case, there\ncan be many categories. The loss function is effectively a probability\ndistance. In the case of a binary choice:\n\\[\n\\begin{equation}\n\\tag{5}\nLoss = -\\frac{1}{n}\\sum_{i}^n y_i log(\\hat{y}_i) +\n(1-y_i)log(1-\\hat{y}_i)\n\\end{equation}\n\\] In this case, the labels, \\(y_i\\)’s will be 0 or 1 indicating which\nclass the data point belongs to and the \\(\\hat{y}\\)’s should be considered a\nprobability of the data point belonging to the 1-class. Note that only\none of the two terms will be active based on the actual label and also\nthat the log will always be negative because \\(0 \\le \\hat{y}_i \\le 1\\), hence the “-” out\nfront to ensure we have a positive value. Our goal is to minimize the\nloss.\nGradient descent\nOK, we can calculate an error or loss, how do we do better? We could\ntake random steps and start to get an idea of what the loss surface\nlooks like, but that seems like a good way to compute for ever (not a\nbad thing if I am making pretty pictures along the way ;) ). Instead, we\nwill use a little calculus to figure out in which direction we should\nstep. Remembering from calculus, if we compute the gradient, we will\nhave an indication of slope at the point evaluated.\n\\[\n\\begin{equation}\n\\tag{6}\nw_j^{(t)} = w_j^{(t-1)} - \\lambda \\ast \\nabla_{w_j} Loss(w_j)\n\\end{equation}\n\\]\nThinking of this in terms of a linear model, our cost function is\noften MSE given above in (4), we need to compute the gradient:\n\\[\n\\begin{equation}\n\\tag{7}\n\\nabla_{w_j}f(z) = \\nabla_{w_j} \\left[\\frac{1}{n} \\sum_{i=1}^n (y_i -\n\\hat{\\textbf{w}}\\cdot\\textbf{x}_i)^2\\right]\n\\end{equation}\n\\]\nFor a simple linear model, we can simplify our thoughts a little and\nthink of \\(\\textbf{w}\\cdot\\textbf{x}\\)\nas being \\(mx + b\\).\n\\[\n\\begin{eqnarray}\n\\tag{8}\n\\nabla_{w_{[b,m]}}f(z) &=& \\nabla_{w_{[b,m]}} \\left[\\frac{1}{n}\n\\sum_{i=1}^n (y_i - (mx_i+b))^2\\right] \\\\\n\\tag{9}\n\\nabla_{w_{b}}f(z) &=& \\frac{-2}{n} \\sum_{i=1}^n (y_i -\n(mx_i+b)) \\\\\n\\tag{10}\n\\nabla_{w_{m}}f(z) &=& \\frac{-2}{n} \\sum_{i=1}^n x_i(y_i -\n(mx_i+b))\n\\end{eqnarray}\n\\] For binary cross entropy:\n\\[\n\\begin{eqnarray}\n\\tag{11}\n\\nabla_{w_{j}}f(z) &=& \\nabla_{w_{j}}\n\\left[-\\frac{1}{n}\\sum_{i}^n y_i log(\\hat{y}_i) +\n(1-y_i)log(1-\\hat{y}_i)\\right] \\\\\n  && \\text{subsituting in (3)} \\\\\n  &=& \\frac{2}{n} \\sum_{i=1}^n x_i(y_i - \\sigma(z)) \\\\\n\\end{eqnarray}\n\\]\nExample 1: linear model\nWe have gone way too long without data. :)\nFirst, let’s get some data:\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n## create X\nobservations = 50 \nx = np.matrix(range(observations))+1\nones = np.matrix(np.ones(observations))\nX = np.hstack([np.matrix(ones).T, x.T])\n\n# create Y\ntrue_weights = np.matrix([[10],[3]])\nnoise = np.matrix(np.random.uniform(-10,10, size=(observations,))).T\nY = np.matmul(X,true_weights) + noise\n\n# take a peak at our data\nfig1, ax1 = plt.subplots()\nax1.plot(X[:,1], Y, \"x\")\nplt.style.use('seaborn-notebook')\nax1.grid()\nfig1.savefig(\"fig1.png\", dpi=300)\n\nFigure 1: Scatterplot of data drawn using\nunif(-10,10) as noise.Now we need to implement the perceptron. Given a loss function, it\ngoes as follows:\ninit \\(\\textbf{w}\\sim\nrunif(0,1)\\)\ncalculate cost (MSE)\nupdate weights according to gradient\nrepeat 2-3 until some stopping rule (could be number of iterations,\ncould be stability of weights, up to us).\nThere are some other things that we should talk about,\ntrain/validate/test sets, etc, but we will skip for this post. For now,\nlet’s just do it:\n\n\n## ok, do gradient descent\ndef gradient_descent(x, y, w_init, learning_rate):\n    N = x.shape[0]\n    w_grad = w_init\n    ## need a stopping rule, could just be iterations, could also be a min move\n    ## using matrix algebra to simplify this a bit\n    maxIteration = 100000\n    for i in range(maxIteration):\n        error = y - x * w_grad #observed - predicted\n        gradient = -2/N * (x.T * error)\n        w_grad = w_grad - learning_rate * gradient\n    return w_grad\n\nw_start = np.matrix([[0],[0]])\nlearning_rate = 0.001\nw = gradient_descent(X,Y,w_start,learning_rate)\n\n# exact solution using slr inv(x'x)*x'y\nw_exact = np.linalg.inv(X.T*X)*X.T*Y\n\n# take a peak at our how we did\nfig2, ax2 = plt.subplots()\nplt.style.use('seaborn-notebook')\nax2.plot(X[:,1], X * w, color=\"red\")\nax2.scatter(np.ravel(X[:,1]),np.ravel(Y), marker=\"2\", color=\"blue\")\nax2.text(25,50,(\"b = \" + str(round(w[0,0],2)) + \"; m = \" + str(round(w[1,0],2))))\nax2.text(25,40,(\"b.exact = \" + str(round(w_exact[0,0],2)) + \"; m.exact = \" + str(round(w_exact[1,0],2))))\nax2.set_ylabel(\"Y\")\n\nax2.grid()\nfig2.savefig(\"fig2.png\", dpi=300)\n\nFigure 2: perceptron learning of weights\n(1,3) after 10k iterations.Example 2: binary\nclassification\nThis starts the same way: get some data. Let’s simulate it again, in\na future post, we will go through a more expansive and real dataset. For\nnow, let’s imagine a scenario where we are insterested in\nMulticlass perceptrons\nMultilayer Perceptrons\n\n\n\n",
    "preview": "deeplearning/images/perceptron.drawio.png",
    "last_modified": "2022-06-11T09:14:56-04:00",
    "input_file": {},
    "preview_width": 327,
    "preview_height": 251
  }
]
